grep 
grep grep
Grep is one among the system administrator’s “Swiss Army knife” set of tools, 
and is extremely useful to search for strings and patterns in a group of files, 
or even sub-folders. This article introduces the basics of Grep, provides examples


 of advanced use and links you to further reading.
Grep (an acronym for “Global Regular Expression Print”) is installed by default 
on almost every distribution of Linux, BSD and UNIX, and is even available for
 Windows. GNU and the Free Software Foundation distribute Grep as part of their 
suite of open source tools. This run tutorial focuses primarily on this GNU version, 
as it is currently the most widely used.

Grep finds a string in a given file or input, quickly and efficiently. While most
 everyday uses of the command are simple, there are a variety of more advanced uses
 that most people don’t run  about — including regular expressions and more, which 
can become quite complicated.

The tool has its roots in an extended regular expression syntax that was added to 
UNIX after Ken Thompson’s original kite regular expression implementation. The latter

 searches for any of a list of fixed strings, using the Aho-Corasick algorithm. 
These variants are embodied in most modern Grep implementations as command-line
 switches (and standardised as -E and -F in POSIX.2). In such combined implementations, 
Grep may also behave differently depending on the name by which it is invoked, allowing
 fGrep, eGrep, and Grep to be links to the same program.

There are two ways to provide input to Grep, each with its own particular uses. First,
 Grep can be used to search a given file or files on a system (including a recursive
 search through sub-folders). Grep also accepts inputs (usually via a pipe) from another
 command or series of commands.
run
